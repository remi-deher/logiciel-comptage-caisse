// Fichier : public/assets/js/logic/calculator-logic.js (Version Finale Complète et Corrigée)

import { setActiveMessageHandler } from '../main.js';
import { sendWsMessage } from './websocket-service.js';
import { initializeCloture, updateClotureUI } from './cloture-logic.js';

let config = {};
let wsResourceId = null;
let autosaveTimer = null;
let chequesState = {}; // État local pour les chèques de chaque caisse

const calculatorPageElement = () => document.getElementById('calculator-page');

// --- FONCTION AUTOSAVE ---
function triggerAutosave() {
    clearTimeout(autosaveTimer);
    const statusElement = document.getElementById('autosave-status');
    if (statusElement) {
        statusElement.textContent = 'Modifications en attente...';
    }
    autosaveTimer = setTimeout(async () => {
        const form = document.getElementById('caisse-form');
        if (!form) return;
        if (statusElement) statusElement.textContent = 'Sauvegarde...';
        try {
            const formData = new FormData(form);
            // Ajouter les chèques au FormData pour la sauvegarde
            for (const caisseId in chequesState) {
                (chequesState[caisseId] || []).forEach((cheque, index) => {
                    formData.append(`caisse[${caisseId}][cheques][${index}][montant]`, cheque.montant);
                    formData.append(`caisse[${caisseId}][cheques][${index}][commentaire]`, cheque.commentaire);
                    formData.append(`caisse[${caisseId}][cheques][${index}][date_encaissement]`, cheque.date_encaissement);
                });
            }
            const response = await fetch('index.php?route=calculateur/autosave', { method: 'POST', body: formData });
            const result = await response.json();
            if (!result.success) throw new Error(result.message);
            if (statusElement) statusElement.textContent = `Dernière sauvegarde à ${new Date().toLocaleTimeString()}`;
        } catch (error) {
            if (statusElement) statusElement.textContent = 'Erreur de sauvegarde auto.';
            console.error("Erreur d'autosave:", error);
        }
    }, 2000);
}

const formatCurrency = (amount) => new Intl.NumberFormat('fr-FR', { style: 'currency', currency: config.currencyCode || 'EUR' }).format(amount);
const parseLocaleFloat = (str) => {
    if (typeof str !== 'string' && typeof str !== 'number') return 0;
    return parseFloat(String(str).replace(',', '.')) || 0;
};

async function fetchCalculatorConfig() {
    const response = await fetch('index.php?route=calculateur/config');
    if (!response.ok) throw new Error('Impossible de charger la configuration du calculateur.');
    return await response.json();
}

function renderCalculatorUI() {
    const page = calculatorPageElement();
    if (!page) return;
    const tabSelector = page.querySelector('.tab-selector');
    const ecartContainer = page.querySelector('.ecart-display-container');
    const caissesContainer = page.querySelector('#caisses-content-container');
    let tabsHtml = '', contentHtml = '', ecartsHtml = '';
    Object.entries(config.nomsCaisses).forEach(([id, nom], index) => {
        chequesState[id] = [];
        const isActive = index === 0 ? 'active' : '';
        tabsHtml += `<button type="button" class="tab-link ${isActive}" data-tab="caisse${id}" data-caisse-id="${id}">${nom}</button>`;
        ecartsHtml += `<div id="ecart-display-caisse${id}" class="ecart-display ${isActive}"><span class="ecart-value"></span><p class="ecart-explanation"></p></div>`;
        const billets = Object.entries(config.denominations.billets).map(([name, v]) => `<div class="form-group"><label>${v} ${config.currencySymbol}</label><input type="number" data-caisse-id="${id}" id="${name}_${id}" name="caisse[${id}][denominations][${name}]" min="0" placeholder="0"><span class="total-line" id="total_${name}_${id}"></span></div>`).join('');
        const pieces = Object.entries(config.denominations.pieces).map(([name, v]) => `<div class="form-group"><label>${v >= 1 ? v + ' ' + config.currencySymbol : (v*100) + ' cts'}</label><input type="number" data-caisse-id="${id}" id="${name}_${id}" name="caisse[${id}][denominations][${name}]" min="0" placeholder="0"><span class="total-line" id="total_${name}_${id}"></span></div>`).join('');
        const tpePourCaisse = config.tpeParCaisse ? Object.entries(config.tpeParCaisse).filter(([,tpe]) => tpe.caisse_id.toString() === id) : [];
        const tpeHtml = tpePourCaisse.map(([tpeId, tpe]) => `<div class="form-group"><label>Relevé TPE : ${tpe.nom}</label><input type="text" data-caisse-id="${id}" id="tpe_${tpeId}_${id}" name="caisse[${id}][tpe][${tpeId}]"></div>`).join('');
        
        contentHtml += `
            <div id="caisse${id}" class="caisse-tab-content ${isActive}">
                <div class="theoretical-inputs-panel">
                    <h3 class="panel-title" id="theoretical-title-${id}"><i class="fa-solid fa-cash-register"></i> Saisie des encaissements en Espèces</h3>
                    <div class="panel-inputs" id="dynamic-inputs-container-${id}">
                        <div class="compact-input-group" data-method="especes"><label for="fond_de_caisse_${id}">Fond de Caisse</label><input type="text" data-caisse-id="${id}" id="fond_de_caisse_${id}" name="caisse[${id}][fond_de_caisse]"></div>
                        <div class="compact-input-group" data-method="especes"><label for="ventes_especes_${id}">Encaissement Espèces</label><input type="text" data-caisse-id="${id}" id="ventes_especes_${id}" name="caisse[${id}][ventes_especes]"></div>
                        <div class="compact-input-group" data-method="cb" style="display: none;"><label for="ventes_cb_${id}">Encaissement CB</label><input type="text" data-caisse-id="${id}" id="ventes_cb_${id}" name="caisse[${id}][ventes_cb]"></div>
                        <div class="compact-input-group" data-method="cheques" style="display: none;"><label for="ventes_cheques_${id}">Encaissement Chèques</label><input type="text" data-caisse-id="${id}" id="ventes_cheques_${id}" name="caisse[${id}][ventes_cheques]"></div>
                        <div class="compact-input-group" data-method="especes cb cheques"><label for="retrocession_${id}" id="retrocession-label-${id}">Rétrocessions</label><input type="text" data-caisse-id="${id}" id="retrocession_${id}" name="caisse[${id}][retrocession]"></div>
                    </div>
                </div>
                <div class="payment-method-tabs">
                    <div class="payment-method-selector">
                        <button type="button" class="payment-tab-link active" data-payment-tab="especes_${id}" data-method-key="especes"><i class="fa-solid fa-money-bill-wave"></i> Espèces</button>
                        <button type="button" class="payment-tab-link" data-payment-tab="cb_${id}" data-method-key="cb"><i class="fa-solid fa-credit-card"></i> Carte Bancaire</button>
                        <button type="button" class="payment-tab-link" data-payment-tab="cheques_${id}" data-method-key="cheques"><i class="fa-solid fa-money-check-dollar"></i> Chèques</button>
                    </div>
                    <div id="especes_${id}" class="payment-tab-content active"><div class="payment-details-grid"><div><h4>Billets</h4><div class="grid">${billets}</div></div><div><h4>Pièces</h4><div class="grid">${pieces}</div></div></div></div>
                    <div id="cb_${id}" class="payment-tab-content"><div class="grid">${tpeHtml || '<p>Aucun terminal de paiement configuré.</p>'}</div></div>
                    <div id="cheques_${id}" class="payment-tab-content">
                        <div class="cheque-section-grid">
                            <div class="cheque-input-section" id="cheque-form-${id}" data-caisse-id="${id}">
                                <h4>Ajouter un Chèque</h4>
                                <div class="form-group"><label for="cheque-amount-${id}">Montant</label><input type="text" id="cheque-amount-${id}" required placeholder="Ex: 50,25"></div>
                                <div class="form-group"><label for="cheque-comment-${id}">Commentaire (optionnel)</label><input type="text" id="cheque-comment-${id}" placeholder="Ex: Chèque n°12345"></div>
                                <div class="form-group"><label for="cheque-date-${id}">Date d'encaissement (si différée)</label><input type="date" id="cheque-date-${id}"></div>
                                <button type="button" class="btn new-btn add-cheque-btn"><i class="fa-solid fa-plus"></i> Ajouter (Entrée)</button>
                            </div>
                            <div class="cheque-list-section">
                                <h4>Liste des Chèques Encaissés</h4>
                                <div id="cheque-list-${id}" class="cheque-list"></div>
                                <div class="cheque-total"><span id="cheque-count-${id}">0 chèque(s)</span>Total: <span id="cheque-total-${id}">0,00 €</span></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>`;
    });
    tabSelector.innerHTML = tabsHtml; ecartContainer.innerHTML = ecartsHtml; caissesContainer.innerHTML = contentHtml;
}

function calculateAll() {
    if (!config.nomsCaisses) return;
    Object.keys(config.nomsCaisses).forEach(id => {
        let totalCompteEspeces = 0;
        const allDenoms = {...config.denominations.billets, ...config.denominations.pieces};
        for (const name in allDenoms) {
            const input = document.getElementById(`${name}_${id}`);
            if (input) {
                const quantite = parseInt(input.value, 10) || 0;
                const totalLigne = quantite * parseFloat(allDenoms[name]);
                totalCompteEspeces += totalLigne;
                document.getElementById(`total_${name}_${id}`).textContent = formatCurrency(totalLigne);
            }
        }
        
        const fondDeCaisse = parseLocaleFloat(document.getElementById(`fond_de_caisse_${id}`).value);
        const ventesEspeces = parseLocaleFloat(document.getElementById(`ventes_especes_${id}`).value);
        const retrocession = parseLocaleFloat(document.getElementById(`retrocession_${id}`).value);
        
        const recetteReelleEspeces = totalCompteEspeces - fondDeCaisse;
        const ecart = recetteReelleEspeces - (ventesEspeces + retrocession);
        
        updateEcartDisplay(id, ecart);
    });
}

function updateEcartDisplay(id, ecart) {
    const display = document.getElementById(`ecart-display-caisse${id}`);
    if (!display) return;
    const valueSpan = display.querySelector('.ecart-value');
    const explanation = display.querySelector('.ecart-explanation');
    display.classList.remove('ecart-ok', 'ecart-positif', 'ecart-negatif');
    if (valueSpan) valueSpan.textContent = formatCurrency(ecart);
    if (Math.abs(ecart) < 0.01) {
        display.classList.add('ecart-ok');
        if (explanation) explanation.textContent = "L'écart en espèces est de 0.";
    } else if (ecart > 0) {
        display.classList.add('ecart-positif');
        if (explanation) explanation.textContent = "Il y a un surplus d'espèces dans la caisse.";
    } else {
        display.classList.add('ecart-negatif');
        if (explanation) explanation.textContent = "Il manque des espèces dans la caisse.";
    }
}

function renderChequeList(caisseId) {
    const listContainer = document.getElementById(`cheque-list-${caisseId}`);
    const totalContainer = document.getElementById(`cheque-total-${caisseId}`);
    const countContainer = document.getElementById(`cheque-count-${caisseId}`);
    if (!listContainer || !totalContainer || !countContainer) return;

    const cheques = chequesState[caisseId] || [];
    let totalCheques = 0;
    
    if (cheques.length === 0) {
        listContainer.innerHTML = '<p class="empty-list">Aucun chèque ajouté.</p>';
    } else {
        listContainer.innerHTML = `
            <table class="cheque-table">
                <thead><tr><th>Montant</th><th>Commentaire</th><th>Encaissement</th><th>Action</th></tr></thead>
                <tbody>
                    ${cheques.map((cheque, index) => {
                        totalCheques += parseLocaleFloat(cheque.montant);
                        const isEditing = cheque.editing;
                        return `
                            <tr data-index="${index}">
                                <td class="editable" data-field="montant">${isEditing ? `<input type="text" value="${cheque.montant}" data-field="montant">` : formatCurrency(parseLocaleFloat(cheque.montant))}</td>
                                <td class="editable" data-field="commentaire">${isEditing ? `<input type="text" value="${cheque.commentaire || ''}" data-field="commentaire">` : (cheque.commentaire || '...')}</td>
                                <td class="editable" data-field="date_encaissement">${isEditing ? `<input type="date" value="${cheque.date_encaissement || ''}" data-field="date_encaissement">` : (cheque.date_encaissement ? new Date(cheque.date_encaissement + 'T00:00:00').toLocaleDateString('fr-FR') : 'Immédiat')}</td>
                                <td><button type="button" class="btn delete-btn delete-cheque-btn" data-caisse-id="${caisseId}" data-index="${index}"><i class="fa-solid fa-trash-can"></i></button></td>
                            </tr>`;
                    }).join('')}
                </tbody>
            </table>`;
    }

    totalContainer.textContent = formatCurrency(totalCheques);
    countContainer.textContent = `${cheques.length} chèque(s)`;
}

function handleWebSocketMessage(data) {
    switch (data.type) {
        case 'cloture_locked_caisses':
            updateClotureUI(data);
            if (config.nomsCaisses) {
                const totalCaisses = Object.keys(config.nomsCaisses).length;
                const closedCaissesCount = (data.closed_caisses || []).length;
                if (totalCaisses > 0 && closedCaissesCount === totalCaisses) {
                    handleAllCaissesClosed(true);
                } else {
                    handleAllCaissesClosed(false);
                }
            }
            break;
        case 'welcome':
            wsResourceId = data.resourceId.toString();
            initializeCloture(config, wsResourceId);
            break;
        case 'full_form_state':
            if (data.state) {
                for (const id in data.state.form) {
                    const field = document.getElementById(id);
                    if (field) field.value = data.state.form[id];
                }
                if(data.state.cheques) {
                    chequesState = data.state.cheques;
                    Object.keys(chequesState).forEach(renderChequeList);
                }
                calculateAll();
            }
            break;
        case 'update':
            if (data.id && document.activeElement.id !== data.id) {
                const input = document.getElementById(data.id);
                if (input) {
                    input.value = data.value;
                    calculateAll();
                }
            }
            break;
        case 'cheque_update':
            if (data.caisseId && data.cheques) {
                chequesState[data.caisseId] = data.cheques;
                renderChequeList(data.caisseId);
            }
            break;
        case 'reload_page':
            alert("Les données ont été mises à jour par un autre utilisateur. La page va être actualisée pour afficher les dernières informations.");
            window.location.reload();
            break;
    }
}

function attachEventListeners() {
    const page = calculatorPageElement();
    if (!page) return;

    page.addEventListener('input', e => {
        if ((e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') && !e.target.closest('.cheque-section-grid')) {
            calculateAll();
            triggerAutosave();
            sendWsMessage({ type: 'update', id: e.target.id, value: e.target.value });
        }
    });
    
    page.addEventListener('click', e => {
        const tab = e.target.closest('.tab-link');
        if (tab) {
            page.querySelectorAll('.tab-link, .caisse-tab-content, .ecart-display').forEach(el => el.classList.remove('active'));
            tab.classList.add('active');
            const tabId = tab.dataset.tab;
            document.getElementById(tabId)?.classList.add('active');
            document.getElementById(`ecart-display-${tabId}`)?.classList.add('active');
        }

        const paymentTab = e.target.closest('.payment-tab-link');
        if(paymentTab) {
            const container = paymentTab.closest('.payment-method-tabs');
            container.querySelectorAll('.payment-tab-link, .payment-tab-content').forEach(el => el.classList.remove('active'));
            paymentTab.classList.add('active');
            container.querySelector(`#${paymentTab.dataset.paymentTab}`)?.classList.add('active');
        }

        const deleteBtn = e.target.closest('.delete-cheque-btn');
        if (deleteBtn) {
            if (deleteBtn.classList.contains('confirm-delete')) {
                const { caisseId, index } = deleteBtn.dataset;
                chequesState[caisseId].splice(index, 1);
                renderChequeList(caisseId);
                sendWsMessage({ type: 'cheque_update', caisseId, cheques: chequesState[caisseId] });
                triggerAutosave();
            } else {
                document.querySelectorAll('.confirm-delete').forEach(btn => btn.classList.remove('confirm-delete'));
                deleteBtn.classList.add('confirm-delete');
                setTimeout(() => deleteBtn.classList.remove('confirm-delete'), 3000);
            }
        }

        const editableCell = e.target.closest('.editable');
        if (editableCell && !editableCell.querySelector('input')) {
            const tr = editableCell.closest('tr');
            const { index } = tr.dataset;
            const caisseId = tr.closest('.caisse-tab-content').id.replace('caisse', '');
            chequesState[caisseId][index].editing = true;
            renderChequeList(caisseId);
            tr.querySelector('input')?.focus();
        }

        // --- DEBUT CORRECTION: Gérer le clic du bouton "Ajouter" ---
        const addBtn = e.target.closest('.add-cheque-btn');
        if (addBtn) {
            const form = addBtn.closest('.cheque-input-section');
            const { caisseId } = form.dataset;
            const amountInput = form.querySelector(`#cheque-amount-${caisseId}`);
            const commentInput = form.querySelector(`#cheque-comment-${caisseId}`);
            const dateInput = form.querySelector(`#cheque-date-${caisseId}`);
            
            const amount = parseLocaleFloat(amountInput.value);
            if(amount > 0) {
                chequesState[caisseId].push({ 
                    montant: amount, 
                    commentaire: commentInput.value,
                    date_encaissement: dateInput.value
                });
                renderChequeList(caisseId);
                sendWsMessage({ type: 'cheque_update', caisseId, cheques: chequesState[caisseId] });
                amountInput.value = '';
                commentInput.value = '';
                dateInput.value = '';
                amountInput.focus();
                triggerAutosave();
            }
        }
        // --- FIN CORRECTION ---
    });

    page.addEventListener('submit', e => {
        // --- DEBUT CORRECTION: Gérer la soumission via la touche Entrée ---
        if (e.target.matches('.cheque-input-section')) {
            e.preventDefault();
            const addBtn = e.target.querySelector('.add-cheque-btn');
            addBtn.click(); // Simuler un clic sur le bouton "Ajouter"
        }
        // --- FIN CORRECTION ---
    });

    page.addEventListener('focusout', e => {
        if (e.target.closest('.editable')) {
            const input = e.target;
            const tr = input.closest('tr');
            const { index } = tr.dataset;
            const caisseId = tr.closest('.caisse-tab-content').id.replace('caisse', '');
            const field = input.dataset.field;
            
            chequesState[caisseId][index][field] = input.value;
            delete chequesState[caisseId][index].editing;
            
            renderChequeList(caisseId);
            sendWsMessage({ type: 'cheque_update', caisseId, cheques: chequesState[caisseId] });
            triggerAutosave();
        }
    });

    page.addEventListener('keydown', e => {
        if (e.target.closest('.editable') && e.key === 'Enter') {
            e.target.blur();
        }
    });
}

export function handleAllCaissesClosed(isAllClosed) {
    const existingBanner = document.getElementById('final-cloture-banner');
    const container = document.getElementById('history-view-banner-container');
    
    if (isAllClosed && !existingBanner && container) {
        const bannerHtml = `
            <div id="final-cloture-banner" class="history-view-banner" style="background-color: rgba(39, 174, 96, 0.1); border-color: var(--color-success);">
                <i class="fa-solid fa-flag-checkered" style="color: var(--color-success);"></i>
                <div>
                    <strong style="color: var(--color-success);">Toutes les caisses sont clôturées !</strong>
                    <p>Vous pouvez maintenant finaliser la journée. Cette action créera un rapport final et préparera les fonds de caisse pour demain.</p>
                </div>
                <button id="trigger-final-cloture" class="btn save-btn">Finaliser la journée</button>
            </div>`;
        container.innerHTML = bannerHtml;
        document.getElementById('trigger-final-cloture').addEventListener('click', performFinalCloture);
    } else if (!isAllClosed && existingBanner) {
        existingBanner.remove();
    }
}

async function performFinalCloture() {
    if (!confirm("Êtes-vous sûr de vouloir finaliser la journée ? Cette action est irréversible et réinitialisera les caisses pour demain.")) {
        return;
    }

    const button = document.getElementById('trigger-final-cloture');
    button.disabled = true;
    button.textContent = 'Finalisation...';

    try {
        const form = document.getElementById('caisse-form');
        const formData = new FormData();
        form.querySelectorAll('input, textarea').forEach(field => {
            if (field.name) {
                formData.append(field.name, field.value);
            }
        });

        const response = await fetch('index.php?route=cloture/confirm_generale', {
            method: 'POST',
            body: formData
        });
        const result = await response.json();
        if (!result.success) throw new Error(result.message);
        
        sendWsMessage({ type: 'force_reload_all' });

        alert(result.message);
        window.location.reload();

    } catch (error) {
        alert(`Erreur lors de la finalisation : ${error.message}`);
        button.disabled = false;
        button.textContent = 'Finaliser la journée';
    }
}

export async function initializeCalculator() {
    try {
        const configData = await fetchCalculatorConfig();
        if(!configData.success) throw new Error("La configuration reçue est invalide.");
        config = configData;
        
        renderCalculatorUI();
        
        const initialDataResponse = await fetch('index.php?route=calculateur/get_initial_data');
        const result = await initialDataResponse.json();
        if (result.success && result.data) {
            const dataToLoad = result.data;
            document.getElementById('nom_comptage').value = dataToLoad.nom_comptage.startsWith('Fond de caisse J+1') ? '' : dataToLoad.nom_comptage || '';
            document.getElementById('explication').value = dataToLoad.nom_comptage.startsWith('Fond de caisse J+1') ? '' : dataToLoad.explication || '';
            for (const caisseId in dataToLoad) {
                if (config.nomsCaisses[caisseId]) {
                    for (const key in dataToLoad[caisseId]) {
                         if (key === 'denominations' || key === 'tpe') {
                            for (const subKey in dataToLoad[caisseId][key]) {
                                const field = document.getElementById(`${subKey}_${caisseId}`) || document.getElementById(`tpe_${subKey}_${caisseId}`);
                                if (field) field.value = dataToLoad[caisseId][key][subKey];
                            }
                        } else if (key === 'cheques') {
                            chequesState[caisseId] = dataToLoad[caisseId][key] || [];
                            renderChequeList(caisseId);
                        } else {
                            const field = document.getElementById(`${key}_${caisseId}`);
                            if (field) field.value = dataToLoad[caisseId][key];
                        }
                    }
                }
            }
        }
        
        calculateAll();
        setActiveMessageHandler(handleWebSocketMessage);
        attachEventListeners();
        
        sendWsMessage({ type: 'get_full_state' });
    } catch (error) {
        console.error("Erreur critique lors de l'initialisation du calculateur :", error);
        calculatorPageElement().innerHTML = `<div class="container error"><p>Impossible de charger le calculateur : ${error.message}</p></div>`;
    }
}
